use windows::Win32::UI::Input::KeyboardAndMouse::{
  GetKeyState, GetKeyboardLayout, VkKeyScanExW, VIRTUAL_KEY, VK_0, VK_1,
  VK_2, VK_3, VK_4, VK_5, VK_6, VK_7, VK_8, VK_9, VK_A, VK_ADD, VK_B,
  VK_BACK, VK_C, VK_CAPITAL, VK_CONTROL, VK_D, VK_DECIMAL, VK_DELETE,
  VK_DIVIDE, VK_DOWN, VK_E, VK_END, VK_ESCAPE, VK_F, VK_F1, VK_F10,
  VK_F11, VK_F12, VK_F13, VK_F14, VK_F15, VK_F16, VK_F17, VK_F18, VK_F19,
  VK_F2, VK_F20, VK_F21, VK_F22, VK_F23, VK_F24, VK_F3, VK_F4, VK_F5,
  VK_F6, VK_F7, VK_F8, VK_F9, VK_G, VK_H, VK_HOME, VK_I, VK_INSERT, VK_J,
  VK_K, VK_L, VK_LCONTROL, VK_LEFT, VK_LMENU, VK_LSHIFT, VK_LWIN, VK_M,
  VK_MEDIA_NEXT_TRACK, VK_MEDIA_PLAY_PAUSE, VK_MEDIA_PREV_TRACK,
  VK_MEDIA_STOP, VK_MENU, VK_MULTIPLY, VK_N, VK_NEXT, VK_NUMLOCK,
  VK_NUMPAD0, VK_NUMPAD1, VK_NUMPAD2, VK_NUMPAD3, VK_NUMPAD4, VK_NUMPAD5,
  VK_NUMPAD6, VK_NUMPAD7, VK_NUMPAD8, VK_NUMPAD9, VK_O, VK_OEM_1,
  VK_OEM_2, VK_OEM_3, VK_OEM_4, VK_OEM_5, VK_OEM_6, VK_OEM_7,
  VK_OEM_COMMA, VK_OEM_MINUS, VK_OEM_PERIOD, VK_OEM_PLUS, VK_P, VK_PRIOR,
  VK_Q, VK_R, VK_RCONTROL, VK_RETURN, VK_RIGHT, VK_RMENU, VK_RSHIFT,
  VK_RWIN, VK_S, VK_SCROLL, VK_SHIFT, VK_SNAPSHOT, VK_SPACE, VK_SUBTRACT,
  VK_T, VK_TAB, VK_U, VK_UP, VK_V, VK_VOLUME_DOWN, VK_VOLUME_MUTE,
  VK_VOLUME_UP, VK_W, VK_X, VK_Y, VK_Z,
};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Key {
  A,
  B,
  C,
  D,
  E,
  F,
  G,
  H,
  I,
  J,
  K,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  D0,
  D1,
  D2,
  D3,
  D4,
  D5,
  D6,
  D7,
  D8,
  D9,
  Numpad0,
  Numpad1,
  Numpad2,
  Numpad3,
  Numpad4,
  Numpad5,
  Numpad6,
  Numpad7,
  Numpad8,
  Numpad9,
  F1,
  F2,
  F3,
  F4,
  F5,
  F6,
  F7,
  F8,
  F9,
  F10,
  F11,
  F12,
  F13,
  F14,
  F15,
  F16,
  F17,
  F18,
  F19,
  F20,
  F21,
  F22,
  F23,
  F24,
  Shift,
  LShift,
  RShift,
  Control,
  LControl,
  RControl,
  Alt,
  LAlt,
  RAlt,
  Win,
  LWin,
  RWin,
  Space,
  Escape,
  Back,
  Tab,
  Enter,
  Left,
  Right,
  Up,
  Down,
  NumLock,
  ScrollLock,
  CapsLock,
  PageUp,
  PageDown,
  Insert,
  Delete,
  End,
  Home,
  PrintScreen,
  Multiply,
  Add,
  Subtract,
  Decimal,
  Divide,
  VolumeUp,
  VolumeDown,
  VolumeMute,
  MediaNextTrack,
  MediaPrevTrack,
  MediaStop,
  MediaPlayPause,
  OemSemicolon,
  OemQuestion,
  OemTilde,
  OemOpenBrackets,
  OemPipe,
  OemCloseBrackets,
  OemQuotes,
  OemPlus,
  OemComma,
  OemMinus,
  OemPeriod,
  Custom(u16),
}

impl Key {
  /// Check if the key is analogous to another key.
  /// Returns `true` if the keys are the same or if `other` is a
  /// specialisation of self.
  ///
  /// # Example
  /// ```rs
  /// assert!(Key::A.is_analogous(Key::A));
  /// assert!(Key::Shift.is_analogous(Key::LShift));
  /// assert!(Key::LControl.is_analogous(Key::RControl) == false);
  /// ```
  pub fn is_analogous(self, other: Key) -> bool {
    #[allow(clippy::match_same_arms)]
    match (self, other) {
      (Key::Shift, Key::LShift | Key::RShift) => true,
      (Key::Control, Key::LControl | Key::RControl) => true,
      (Key::Alt, Key::LAlt | Key::RAlt) => true,
      (Key::Win, Key::LWin | Key::RWin) => true,
      _ => self == other,
    }
  }

  /// Returns whether the key is a generic key, such as `Shift`, `Control`,
  /// `Alt`, or `Win` instead of the more specific versions like
  /// `LShift`, `RShift`, etc.
  pub fn is_generic(self) -> bool {
    matches!(self, Key::Shift | Key::Control | Key::Alt | Key::Win)
  }

  /// Returns a generic version of the key.
  /// Special keys like `LShift`, `RShift`, `LControl`, `RControl` etc.
  /// will return the gereric Shift, Control, Alt, or Win key.
  /// Other keys will return themselves unchanged.
  pub fn get_generic(self) -> Self {
    match self {
      Key::LShift | Key::RShift => Key::Shift,
      Key::LControl | Key::RControl => Key::Control,
      Key::LAlt | Key::RAlt => Key::Alt,
      Key::LWin | Key::RWin => Key::Win,
      _ => self,
    }
  }

  /// Get the specific key(s) for a Key.
  /// Generic keys like `Shift`, `Control`, `Alt`, and `Win` will return
  /// both the left and right versions of the key.
  /// Non-generic keys will return a vector containing just the key itself.
  pub fn get_specifics(self) -> Vec<Key> {
    match self {
      Key::Shift => vec![Key::LShift, Key::RShift],
      Key::Control => vec![Key::LControl, Key::RControl],
      Key::Alt => vec![Key::LAlt, Key::RAlt],
      Key::Win => vec![Key::LWin, Key::RWin],
      _ => vec![self],
    }
  }

  /// Gets whether this key is currently down.
  pub fn is_down(self) -> bool {
    self.get_specifics().iter().any(|key| key.is_down_raw())
  }

  /// Gets whether this key is currently down using the raw key
  /// code.
  pub fn is_down_raw(self) -> bool {
    let vk_code = self.into_vk();
    unsafe { (GetKeyState(vk_code.into()) & 0x80) == 0x80 }
  }

  #[allow(clippy::too_many_lines)]
  pub fn from_str(key: &str) -> Option<Self> {
    match key.to_lowercase().as_str() {
      "a" => Some(Key::A),
      "b" => Some(Key::B),
      "c" => Some(Key::C),
      "d" => Some(Key::D),
      "e" => Some(Key::E),
      "f" => Some(Key::F),
      "g" => Some(Key::G),
      "h" => Some(Key::H),
      "i" => Some(Key::I),
      "j" => Some(Key::J),
      "k" => Some(Key::K),
      "l" => Some(Key::L),
      "m" => Some(Key::M),
      "n" => Some(Key::N),
      "o" => Some(Key::O),
      "p" => Some(Key::P),
      "q" => Some(Key::Q),
      "r" => Some(Key::R),
      "s" => Some(Key::S),
      "t" => Some(Key::T),
      "u" => Some(Key::U),
      "v" => Some(Key::V),
      "w" => Some(Key::W),
      "x" => Some(Key::X),
      "y" => Some(Key::Y),
      "z" => Some(Key::Z),
      "0" | "d0" => Some(Key::D0),
      "1" | "d1" => Some(Key::D1),
      "2" | "d2" => Some(Key::D2),
      "3" | "d3" => Some(Key::D3),
      "4" | "d4" => Some(Key::D4),
      "5" | "d5" => Some(Key::D5),
      "6" | "d6" => Some(Key::D6),
      "7" | "d7" => Some(Key::D7),
      "8" | "d8" => Some(Key::D8),
      "9" | "d9" => Some(Key::D9),
      "numpad0" => Some(Key::Numpad0),
      "numpad1" => Some(Key::Numpad1),
      "numpad2" => Some(Key::Numpad2),
      "numpad3" => Some(Key::Numpad3),
      "numpad4" => Some(Key::Numpad4),
      "numpad5" => Some(Key::Numpad5),
      "numpad6" => Some(Key::Numpad6),
      "numpad7" => Some(Key::Numpad7),
      "numpad8" => Some(Key::Numpad8),
      "numpad9" => Some(Key::Numpad9),
      "f1" => Some(Key::F1),
      "f2" => Some(Key::F2),
      "f3" => Some(Key::F3),
      "f4" => Some(Key::F4),
      "f5" => Some(Key::F5),
      "f6" => Some(Key::F6),
      "f7" => Some(Key::F7),
      "f8" => Some(Key::F8),
      "f9" => Some(Key::F9),
      "f10" => Some(Key::F10),
      "f11" => Some(Key::F11),
      "f12" => Some(Key::F12),
      "f13" => Some(Key::F13),
      "f14" => Some(Key::F14),
      "f15" => Some(Key::F15),
      "f16" => Some(Key::F16),
      "f17" => Some(Key::F17),
      "f18" => Some(Key::F18),
      "f19" => Some(Key::F19),
      "f20" => Some(Key::F20),
      "f21" => Some(Key::F21),
      "f22" => Some(Key::F22),
      "f23" => Some(Key::F23),
      "f24" => Some(Key::F24),
      "shift" | "shiftkey" => Some(Key::Shift),
      "lshift" | "lshiftkey" => Some(Key::LShift),
      "rshift" | "rshiftkey" => Some(Key::RShift),
      "ctrl" | "controlkey" | "control" => Some(Key::Control),
      "lctrl" | "lcontrolkey" => Some(Key::LControl),
      "rctrl" | "rcontrolkey" => Some(Key::RControl),
      "alt" | "menu" => Some(Key::Alt),
      "lalt" | "lmenu" => Some(Key::LAlt),
      "ralt" | "rmenu" => Some(Key::RAlt),
      "win" => Some(Key::Win),
      "lwin" => Some(Key::LWin),
      "rwin" => Some(Key::RWin),
      "space" => Some(Key::Space),
      "escape" => Some(Key::Escape),
      "back" => Some(Key::Back),
      "tab" => Some(Key::Tab),
      "enter" | "return" => Some(Key::Enter),
      "left" => Some(Key::Left),
      "right" => Some(Key::Right),
      "up" => Some(Key::Up),
      "down" => Some(Key::Down),
      "num_lock" => Some(Key::NumLock),
      "scroll_lock" => Some(Key::ScrollLock),
      "caps_lock" => Some(Key::CapsLock),
      "page_up" => Some(Key::PageUp),
      "page_down" => Some(Key::PageDown),
      "insert" => Some(Key::Insert),
      "delete" => Some(Key::Delete),
      "end" => Some(Key::End),
      "home" => Some(Key::Home),
      "print_screen" => Some(Key::PrintScreen),
      "multiply" => Some(Key::Multiply),
      "add" => Some(Key::Add),
      "subtract" => Some(Key::Subtract),
      "decimal" => Some(Key::Decimal),
      "divide" => Some(Key::Divide),
      "volume_up" => Some(Key::VolumeUp),
      "volume_down" => Some(Key::VolumeDown),
      "volume_mute" => Some(Key::VolumeMute),
      "media_next_track" => Some(Key::MediaNextTrack),
      "media_prev_track" => Some(Key::MediaPrevTrack),
      "media_stop" => Some(Key::MediaStop),
      "media_play_pause" => Some(Key::MediaPlayPause),
      "oem_semicolon" => Some(Key::OemSemicolon),
      "oem_question" => Some(Key::OemQuestion),
      "oem_tilde" => Some(Key::OemTilde),
      "oem_open_brackets" => Some(Key::OemOpenBrackets),
      "oem_pipe" => Some(Key::OemPipe),
      "oem_close_brackets" => Some(Key::OemCloseBrackets),
      "oem_quotes" => Some(Key::OemQuotes),
      "oem_plus" => Some(Key::OemPlus),
      "oem_comma" => Some(Key::OemComma),
      "oem_minus" => Some(Key::OemMinus),
      "oem_period" => Some(Key::OemPeriod),
      _ => {
        // Check if the key exists on the current keyboard layout.
        let utf16_key = key.encode_utf16().next()?;
        let layout = unsafe { GetKeyboardLayout(0) };
        let vk_code = unsafe { VkKeyScanExW(utf16_key, layout) };

        if vk_code == -1 {
          return None;
        }

        // The low-order byte contains the virtual-key code and the high-
        // order byte contains the shift state.
        let [high_order, low_order] = vk_code.to_be_bytes();

        // Key is valid if it doesn't require shift or alt to be pressed.
        match high_order {
          0 => Some(Key::Custom(u16::from(low_order))),
          _ => None,
        }
      }
    }
  }

  #[allow(clippy::too_many_lines)]
  pub fn from_vk(vk: u16) -> Self {
    match VIRTUAL_KEY(vk) {
      VK_A => Key::A,
      VK_B => Key::B,
      VK_C => Key::C,
      VK_D => Key::D,
      VK_E => Key::E,
      VK_F => Key::F,
      VK_G => Key::G,
      VK_H => Key::H,
      VK_I => Key::I,
      VK_J => Key::J,
      VK_K => Key::K,
      VK_L => Key::L,
      VK_M => Key::M,
      VK_N => Key::N,
      VK_O => Key::O,
      VK_P => Key::P,
      VK_Q => Key::Q,
      VK_R => Key::R,
      VK_S => Key::S,
      VK_T => Key::T,
      VK_U => Key::U,
      VK_V => Key::V,
      VK_W => Key::W,
      VK_X => Key::X,
      VK_Y => Key::Y,
      VK_Z => Key::Z,
      VK_0 => Key::D0,
      VK_1 => Key::D1,
      VK_2 => Key::D2,
      VK_3 => Key::D3,
      VK_4 => Key::D4,
      VK_5 => Key::D5,
      VK_6 => Key::D6,
      VK_7 => Key::D7,
      VK_8 => Key::D8,
      VK_9 => Key::D9,
      VK_NUMPAD0 => Key::Numpad0,
      VK_NUMPAD1 => Key::Numpad1,
      VK_NUMPAD2 => Key::Numpad2,
      VK_NUMPAD3 => Key::Numpad3,
      VK_NUMPAD4 => Key::Numpad4,
      VK_NUMPAD5 => Key::Numpad5,
      VK_NUMPAD6 => Key::Numpad6,
      VK_NUMPAD7 => Key::Numpad7,
      VK_NUMPAD8 => Key::Numpad8,
      VK_NUMPAD9 => Key::Numpad9,
      VK_F1 => Key::F1,
      VK_F2 => Key::F2,
      VK_F3 => Key::F3,
      VK_F4 => Key::F4,
      VK_F5 => Key::F5,
      VK_F6 => Key::F6,
      VK_F7 => Key::F7,
      VK_F8 => Key::F8,
      VK_F9 => Key::F9,
      VK_F10 => Key::F10,
      VK_F11 => Key::F11,
      VK_F12 => Key::F12,
      VK_F13 => Key::F13,
      VK_F14 => Key::F14,
      VK_F15 => Key::F15,
      VK_F16 => Key::F16,
      VK_F17 => Key::F17,
      VK_F18 => Key::F18,
      VK_F19 => Key::F19,
      VK_F20 => Key::F20,
      VK_F21 => Key::F21,
      VK_F22 => Key::F22,
      VK_F23 => Key::F23,
      VK_F24 => Key::F24,
      VK_SHIFT => Key::Shift,
      VK_LSHIFT => Key::LShift,
      VK_RSHIFT => Key::RShift,
      VK_CONTROL => Key::Control,
      VK_LCONTROL => Key::LControl,
      VK_RCONTROL => Key::RControl,
      VK_MENU => Key::Alt,
      VK_LMENU => Key::LAlt,
      VK_RMENU => Key::RAlt,
      VK_LWIN => Key::LWin,
      VK_RWIN => Key::RWin,
      VK_SPACE => Key::Space,
      VK_ESCAPE => Key::Escape,
      VK_BACK => Key::Back,
      VK_TAB => Key::Tab,
      VK_RETURN => Key::Enter,
      VK_LEFT => Key::Left,
      VK_RIGHT => Key::Right,
      VK_UP => Key::Up,
      VK_DOWN => Key::Down,
      VK_NUMLOCK => Key::NumLock,
      VK_SCROLL => Key::ScrollLock,
      VK_CAPITAL => Key::CapsLock,
      VK_PRIOR => Key::PageUp,
      VK_NEXT => Key::PageDown,
      VK_INSERT => Key::Insert,
      VK_DELETE => Key::Delete,
      VK_END => Key::End,
      VK_HOME => Key::Home,
      VK_SNAPSHOT => Key::PrintScreen,
      VK_MULTIPLY => Key::Multiply,
      VK_ADD => Key::Add,
      VK_SUBTRACT => Key::Subtract,
      VK_DECIMAL => Key::Decimal,
      VK_DIVIDE => Key::Divide,
      VK_VOLUME_UP => Key::VolumeUp,
      VK_VOLUME_DOWN => Key::VolumeDown,
      VK_VOLUME_MUTE => Key::VolumeMute,
      VK_MEDIA_NEXT_TRACK => Key::MediaNextTrack,
      VK_MEDIA_PREV_TRACK => Key::MediaPrevTrack,
      VK_MEDIA_STOP => Key::MediaStop,
      VK_MEDIA_PLAY_PAUSE => Key::MediaPlayPause,
      VK_OEM_1 => Key::OemSemicolon,
      VK_OEM_2 => Key::OemQuestion,
      VK_OEM_3 => Key::OemTilde,
      VK_OEM_4 => Key::OemOpenBrackets,
      VK_OEM_5 => Key::OemPipe,
      VK_OEM_6 => Key::OemCloseBrackets,
      VK_OEM_7 => Key::OemQuotes,
      VK_OEM_PLUS => Key::OemPlus,
      VK_OEM_COMMA => Key::OemComma,
      VK_OEM_MINUS => Key::OemMinus,
      VK_OEM_PERIOD => Key::OemPeriod,
      _ => {
        // Safe to assume that the key is valid on the keyboard layout if
        // its coming from a vk code?
        Key::Custom(vk)
      }
    }
  }

  #[allow(clippy::too_many_lines)]
  fn into_vk(self) -> u16 {
    match self {
      Key::A => VK_A.0,
      Key::B => VK_B.0,
      Key::C => VK_C.0,
      Key::D => VK_D.0,
      Key::E => VK_E.0,
      Key::F => VK_F.0,
      Key::G => VK_G.0,
      Key::H => VK_H.0,
      Key::I => VK_I.0,
      Key::J => VK_J.0,
      Key::K => VK_K.0,
      Key::L => VK_L.0,
      Key::M => VK_M.0,
      Key::N => VK_N.0,
      Key::O => VK_O.0,
      Key::P => VK_P.0,
      Key::Q => VK_Q.0,
      Key::R => VK_R.0,
      Key::S => VK_S.0,
      Key::T => VK_T.0,
      Key::U => VK_U.0,
      Key::V => VK_V.0,
      Key::W => VK_W.0,
      Key::X => VK_X.0,
      Key::Y => VK_Y.0,
      Key::Z => VK_Z.0,
      Key::D0 => VK_0.0,
      Key::D1 => VK_1.0,
      Key::D2 => VK_2.0,
      Key::D3 => VK_3.0,
      Key::D4 => VK_4.0,
      Key::D5 => VK_5.0,
      Key::D6 => VK_6.0,
      Key::D7 => VK_7.0,
      Key::D8 => VK_8.0,
      Key::D9 => VK_9.0,
      Key::Numpad0 => VK_NUMPAD0.0,
      Key::Numpad1 => VK_NUMPAD1.0,
      Key::Numpad2 => VK_NUMPAD2.0,
      Key::Numpad3 => VK_NUMPAD3.0,
      Key::Numpad4 => VK_NUMPAD4.0,
      Key::Numpad5 => VK_NUMPAD5.0,
      Key::Numpad6 => VK_NUMPAD6.0,
      Key::Numpad7 => VK_NUMPAD7.0,
      Key::Numpad8 => VK_NUMPAD8.0,
      Key::Numpad9 => VK_NUMPAD9.0,
      Key::F1 => VK_F1.0,
      Key::F2 => VK_F2.0,
      Key::F3 => VK_F3.0,
      Key::F4 => VK_F4.0,
      Key::F5 => VK_F5.0,
      Key::F6 => VK_F6.0,
      Key::F7 => VK_F7.0,
      Key::F8 => VK_F8.0,
      Key::F9 => VK_F9.0,
      Key::F10 => VK_F10.0,
      Key::F11 => VK_F11.0,
      Key::F12 => VK_F12.0,
      Key::F13 => VK_F13.0,
      Key::F14 => VK_F14.0,
      Key::F15 => VK_F15.0,
      Key::F16 => VK_F16.0,
      Key::F17 => VK_F17.0,
      Key::F18 => VK_F18.0,
      Key::F19 => VK_F19.0,
      Key::F20 => VK_F20.0,
      Key::F21 => VK_F21.0,
      Key::F22 => VK_F22.0,
      Key::F23 => VK_F23.0,
      Key::F24 => VK_F24.0,
      Key::Shift => VK_SHIFT.0,
      Key::LShift => VK_LSHIFT.0,
      Key::RShift => VK_RSHIFT.0,
      Key::Control => VK_CONTROL.0,
      Key::LControl => VK_LCONTROL.0,
      Key::RControl => VK_RCONTROL.0,
      Key::Alt => VK_MENU.0,
      Key::LAlt => VK_LMENU.0,
      Key::RAlt => VK_RMENU.0,
      Key::LWin => VK_LWIN.0,
      Key::RWin => VK_RWIN.0,
      Key::Space => VK_SPACE.0,
      Key::Escape => VK_ESCAPE.0,
      Key::Back => VK_BACK.0,
      Key::Tab => VK_TAB.0,
      Key::Enter => VK_RETURN.0,
      Key::Left => VK_LEFT.0,
      Key::Right => VK_RIGHT.0,
      Key::Up => VK_UP.0,
      Key::Down => VK_DOWN.0,
      Key::NumLock => VK_NUMLOCK.0,
      Key::ScrollLock => VK_SCROLL.0,
      Key::CapsLock => VK_CAPITAL.0,
      Key::PageUp => VK_PRIOR.0,
      Key::PageDown => VK_NEXT.0,
      Key::Insert => VK_INSERT.0,
      Key::Delete => VK_DELETE.0,
      Key::End => VK_END.0,
      Key::Home => VK_HOME.0,
      Key::PrintScreen => VK_SNAPSHOT.0,
      Key::Multiply => VK_MULTIPLY.0,
      Key::Add => VK_ADD.0,
      Key::Subtract => VK_SUBTRACT.0,
      Key::Decimal => VK_DECIMAL.0,
      Key::Divide => VK_DIVIDE.0,
      Key::VolumeUp => VK_VOLUME_UP.0,
      Key::VolumeDown => VK_VOLUME_DOWN.0,
      Key::VolumeMute => VK_VOLUME_MUTE.0,
      Key::MediaNextTrack => VK_MEDIA_NEXT_TRACK.0,
      Key::MediaPrevTrack => VK_MEDIA_PREV_TRACK.0,
      Key::MediaStop => VK_MEDIA_STOP.0,
      Key::MediaPlayPause => VK_MEDIA_PLAY_PAUSE.0,
      Key::OemSemicolon => VK_OEM_1.0,
      Key::OemQuestion => VK_OEM_2.0,
      Key::OemTilde => VK_OEM_3.0,
      Key::OemOpenBrackets => VK_OEM_4.0,
      Key::OemPipe => VK_OEM_5.0,
      Key::OemCloseBrackets => VK_OEM_6.0,
      Key::OemQuotes => VK_OEM_7.0,
      Key::OemPlus => VK_OEM_PLUS.0,
      Key::OemComma => VK_OEM_COMMA.0,
      Key::OemMinus => VK_OEM_MINUS.0,
      Key::OemPeriod => VK_OEM_PERIOD.0,
      Key::Custom(vk) => vk,
      // Default `Key::Win` to LWin as it is the most commonly used and
      // doesn't have a VK code of its own. This key should be handled
      // using `get_specifics()`
      Key::Win => {
        tracing::warn!("Using generic Win key, defaulting to LWin.");
        VK_LWIN.0
      }
    }
  }
}
